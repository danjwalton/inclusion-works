required.packages <- c("reshape2","ggplot2","data.table","WDI")
lapply(required.packages, require, character.only=T)
if(Sys.info()[["user"]]=="dan-w" | Sys.info()[["user"]]=="danw"){
wd <- "G:/My Drive/Work/GitHub/MICS_recode"
wd2 <- "G:/My Drive/Work/GitHub/MICS_recode/project_data/Merge datasets recode selected var"
} else if(Sys.info()[["user"]]=="lewis-s" | Sys.info()[["user"]]=="lewiss"){
wd <- "C:/git/MICS_recode/"
wd2 <- "C:/git/MICS_recode/project_data/Merge datasets recode selected var"
} else if(Sys.info()[["user"]]=="georgia-c" | Sys.info()[["user"]]=="georgiac"){
wd <- "C:/MICS_recode/"
wd2 <- "C:/MICS_recode/project_data/Merge datasets recode selected var"
}
setwd(wd)
##########################
vars_wanted <- c(
"sex"
,
"urban"
,
"p20"
,
"ext"
,
"education_mother"
,
"education_father"
,
"education_max"
,
"education"
,
"birth.reg"
#,
#"test"     #to demonstrate action when wanted variable is missing from underlying data
)
#########################
#################################################################################################
# Instead of rerunning the annual variable aggregation each time we want to do some analysis    #
# we check if our previous data aggregation already includes the variables we need. If it does  #
# then we just load it in. If it doesn't, then we do a new aggregation which takes a while...   #
#################################################################################################
load("output/historical_dhs-mics.RData")
if(!all(vars_wanted %in% names(dhs.mics))){
vars.todo <- setdiff(vars_wanted, names(dhs.mics))
print(paste("The following chosen variables are not currently aggregated:", vars.todo))
load("project_data/historical_micsmf.RData")
load("project_data/historical_dhsmf.RData")
data.total.dhs <- data.total
rm(data.total)
data.total.dhs$datatype <- "dhs"
data.total <- rbind(data.total.dhs, data.total.mics, fill=T)
rm(data.total.dhs, data.total.mics)
names(data.total)[which(names(data.total)==".")] <- "value"
if(!all(vars_wanted %in% names(data.total))){
missing.vars <- setdiff(vars_wanted, names(data.total))
print(paste("ERROR: The following chosen variables are not currently coded, so we cannot aggregate these:", vars.todo))
if(all(setdiff(vars_wanted, missing.vars) %in% names(data.total))){
print("There are no new chosen variables available to aggregate.")
rm(data.total)
break
}
}
data.total <- data.total[!is.na(birth.reg)]
data.total[is.na(data.total)] <- -1
data.total[sex == 9]$sex <- -1 #Nigeria seems to have this
surveys <- unique(data.total[,c("iso3","survey_year","povcal_year","datatype")])
surveys$id <- seq(1,nrow(surveys))
var.cols <- names(data.total)[!(names(data.total) %in% c("iso3", "povcal_year", "survey_year", "datatype", "value", "variable"))]
dums <- sapply(var.cols, function(x) unique(data.total[,..x]), USE.NAMES = F)
dat <- data.table(vars=var.cols, dums=dums)
dums_dat <- function(var.cols){
temp <- dat[vars %in% var.cols]
dums.list <- setNames(temp$dums, temp$vars)
return(dums.list)
}
# New method of generating a dummy grid. Instead of using every possible combination of variable outputs for each survey, we rather find every
# combination of variable outputs which exist across all surveys, and generate a grid for each survey from this combination.
#dummydata <- expand.grid(c(setNames(list(seq(1,nrow(surveys))), "id"), dums_dat(var.cols), setNames("registration", "variable")))
dummydata <- unique(data.total[,..var.cols])
dummydata <- cbind(dummydata[rep(seq_len(nrow(dummydata)), nrow(surveys)),], id=rep(1:nrow(surveys), each=nrow(dummydata)))
dummydata <- merge(surveys, dummydata)
dummydata$id <- NULL
data.total <- merge(dummydata, data.total, all.x=T)
rm(dummydata)
gc()
data.total[is.na(value)]$value <- 0
by.cols <- c("iso3", "povcal_year", var.cols)
#Year weightings
data.total$diff <- abs(data.total$survey_year - data.total$povcal_year)
data.total[is.na(data.total$value)]$diff <- NA
data.total$diff.sign <- sign(data.total$survey_year - data.total$povcal_year)
pos.data.total <- data.total[diff.sign %in% c(0,1)]
neg.data.total <- data.total[diff.sign %in% c(0,-1)]
neg.data.total <- neg.data.total[!(diff==0)]
pos.data.total[,denom:=sum(value),by=.(iso3,povcal_year,survey_year,datatype)]
neg.data.total[,denom:=sum(value),by=.(iso3,povcal_year,survey_year,datatype)]
pos.data.total[denom == 0]$diff <- NA
neg.data.total[denom == 0]$diff <- NA
pos.data.total <- pos.data.total[,.SD[which.min(.SD$diff),],by=by.cols]
neg.data.total <- neg.data.total[,.SD[which.min(.SD$diff),],by=by.cols]
data.total <- rbind(pos.data.total,neg.data.total)
data.total[,year.weight:=(sum(.SD$diff)-.SD$diff)/sum(.SD$diff),by=by.cols]
data.total$diff <- NULL
data.total$diff.sign <- NULL
data.total[data.total$year.weight==0]$year.weight <- 1
data.total[is.nan(data.total$year.weight)]$year.weight <- 1
data.total[, value:=value/sum(value), by=.(iso3, povcal_year, survey_year, datatype)]
data.total.out <- data.total[,.(
value=sum(.SD$value*.SD$year.weight,na.rm=T)/sum(.SD$year.weight),
survey_year=paste(.SD$survey_year,.SD$datatype,collapse=";")
)
,by=by.cols
]
GP20 <- fread("project_data/GP20 headcounts.csv")
#Population weightings
data.total.out <- merge(data.total.out, GP20, by.x=c("iso3","povcal_year"), by.y=c("CountryCode","RequestYear"))
data.total.out$value <- data.total.out$value * data.total.out$ReqYearPopulation
#Rename variable results to plain English
data.total.out <- cbind(data.total.out[,!(..var.cols)], data.table(sapply(data.total.out[,..var.cols], as.character)))
data.total.out[ext=="1"]$ext <- "Extreme poor"
data.total.out[ext=="0"]$ext <- "Not extreme poor"
data.total.out[ext=="-1"]$ext <- "(Ext) No data"
data.total.out[p20=="1"]$p20 <- "P20"
data.total.out[p20=="0"]$p20 <- "Not P20"
data.total.out[p20=="-1"]$p20 <- "(P20) No data"
data.total.out[sex=="1"]$sex <- "Male"
data.total.out[sex=="2"]$sex <- "Female"
data.total.out[sex=="-1"]$sex <- "(Sex) No data"
data.total.out[urban=="1"]$urban <- "Urban"
data.total.out[urban=="0"]$urban <- "Rural"
data.total.out[urban=="-1"]$urban <- "(Area) No data"
data.total.out[birth.reg=="1"]$birth.reg <- "Registered"
data.total.out[birth.reg=="0"]$birth.reg <- "Not registered"
data.total.out[education_max=="1"]$education_max <- "Less than primary"
data.total.out[education_max=="2"]$education_max <- "Primary"
data.total.out[education_max=="3"]$education_max <- "Secondary"
data.total.out[education_max=="4"]$education_max <- "Teritary"
data.total.out[education_max=="-1"]$education_max <- "(Education_max) No data"
data.total.out[education_mother=="1"]$education_mother <- "Less than primary"
data.total.out[education_mother=="2"]$education_mother <- "Primary"
data.total.out[education_mother=="3"]$education_mother <- "Secondary"
data.total.out[education_mother=="4"]$education_mother <- "Teritary"
data.total.out[education_mother=="-1"]$education_mother <- "(Education_mother) No data"
data.total.out[education_father=="1"]$education_father <- "Less than primary"
data.total.out[education_father=="2"]$education_father <- "Primary"
data.total.out[education_father=="3"]$education_father <- "Secondary"
data.total.out[education_father=="4"]$education_father <- "Teritary"
data.total.out[education_father=="-1"]$education_father <- "(Education_father) No data"
dhs.mics <- data.total.out
regions <- read.csv("project_data/regions.csv")
names(regions)[1] <-"iso3"
library(dplyr)
dhs.mics <- left_join(dhs.mics,regions, by="iso3")
setDT(dhs.mics)
dhs.mics[dhs.mics$CountryName=="Kosovo"]$region <- "Europe"
save(dhs.mics,file="output/historical_dhs-mics.RData")
rm(list=ls())
load("output/historical_dhs-mics.RData")
}
#Aggregation analysis function
dhs.mics.aggregate <- function(input=dhs.mics, aggregate.factor="birth.reg", LHS=c("iso3", "povcal_year","region"), RHS=list("ext")){
base <- unique(input[,..LHS])
for(i in 1:length(RHS)){
aggregate.factor.option <- as.character(unique(input[,..aggregate.factor])[2,])
cols <- c(LHS,RHS[[i]])
form <- paste(paste(LHS, collapse=" + ")," ~ ",paste(RHS[[i]], collapse=" + "))
temp <- input[, .(value=sum(value[get(aggregate.factor)==aggregate.factor.option])/sum(value)), by=cols]
temp <- dcast(temp, form)
base <- cbind(base, temp[,!..LHS])
}
return(base)
}
national <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("iso3","povcal_year"), list("ext","p20","urban","sex"))
fwrite(national, "output/dhs.mics BR national.csv")
global <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("povcal_year"), list("ext","p20","urban","sex"))
fwrite(global, "output/dhs.mics BR global.csv")
global.sex <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("povcal_year"), list(c("sex","ext"),c("sex","p20"),c("sex","urban")))
fwrite(global.sex, "output/dhs.mics BR global.sex.csv")
national.sex <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("iso3","povcal_year"),list(c("sex","ext"),c("sex","p20"),c("sex","urban")))
fwrite(national.sex, "output/dhs.mics BR national.sex.csv")
global.education.mother <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("povcal_year"), list("education_mother"))
fwrite(global.education.mother, "output/dhs.mics BR global education.mother.csv")
global.education.father <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("povcal_year"), list("education_father"))
fwrite(global.education.father, "output/dhs.mics BR global education.father.csv")
global.education.max <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("povcal_year"), list("education_max"))
fwrite(global.education.max, "output/dhs.mics BR global education.max.csv")
national.education.mother <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("iso3", "povcal_year"), list("education_mother"))
fwrite(national.education.mother, "output/dhs.mics BR national education_mother.csv")
national.education.father <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("iso3", "povcal_year"), list("education_father"))
fwrite(national.education.father, "output/dhs.mics BR national education_father.csv")
national.education.max <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("iso3", "povcal_year"), list("education_max"))
fwrite(national.education.father, "output/dhs.mics BR national education_max.csv")
regional.education.max <- dhs.mics.aggregate(dhs.mics, "birth.reg", c("region", "povcal_year"), list("education_max"))
fwrite(regional.education.max, "output/dhs.mics BR regional education_max.csv")
required.packages <- c("reshape2", "ggplot2", "data.table")
lapply(required.packages, require, character.only = T)
wd <- "G:/My Drive/Work/GitHub/inclusion-works/"
setwd(wd)
load("project-data/crs 2012-2013.RData")
load("project-data/crs 2014-2015.RData")
load("project-data/crs 2016-2017.RData")
crs <- rbind(crs.2012.2013, crs.2014.2015, crs.2016.2017)
rm(list=c("crs.2012.2013", "crs.2014.2015", "crs.2016.2017"))
keep <- c(
"crs_id"
,
"project_number"
,
"year"
,
"aid_type"
,
"flow_name"
,
"donor_name"
,
"recipient_name"
,
"usd_commitment_deflated"
,
"usd_disbursement_deflated"
,
"purpose_name"
,
"project_title"
,
"short_description"
,
"long_description"
,
"gender"
)
crs <- crs[, ..keep]
crs <- crs[flow_name == "ODA Loans" | flow_name == "ODA Grants" | flow_name == "Equity Investment" | flow_name == "Private Development Finance"]
major.keywords <- c(
"disab", "discapaci", "incapaci", "minusválido", "invalidit", "infirmité", "d-isab"
#,
#"disorder"
,
"handicap"
,
"impairment", "impaired"
,
"pwd", "gwd", "cwd"
,
"chronic health", "chronic ill", "maladie chronique", "enfermedad crónica"
,
"deaf", "sordo", "sourd"
,
"blind", "ciego", "aveugle", "eye health"
,
"special needs", "necesidades especiales", "besoins spéciau"
,
"autistic", "autism", "autist"
,
"mental health", "santé mentale", "salud mental"
,
"prosthes", "prosthès", "prótesis"
,
"mobility device", "dispositivo de movilidad", "dispositif de mobilité"
,
"wheelchair", "fauteuil roulant", "silla de ruedas"
,
"hearing aid", "audífono", "dispositif d'écoute pour malentendant"
,
"amputation", "amputee", "amputé", "amputa"
,
"schizophreni", "esquizofrenia", "schizophrénie"
,
"sign language", "langage des signes", "lenguaje de señas"
,
"arthriti", "artritis", "arthrite"
,
"rheumat", "rhumat", "reumat"
,
"dementia", "démence", "demencia"
,
"spina "
,
"hydrocephalus", "hidrocefalia", "l'hydrocéphalie"
,
"diabetes", "diabète"
,
"atlas alliance", "atlas allinance", "abilis foundation", "zapdd"
#,
#"dpos ", "dpo ", "dpo's", "dpos[.]", "dpo[.]", "dpo's[.]"
)
minor.keywords <- c(
"war victim", "victimas de guerra", "victimes de guerre"
,
"landmine victim", "victime de mine", "víctima de minas terrestres"
#,
#"wounded"
#,
#"injured", "injuries"
#,
#"physiotherapy", "fisioterapia"
)
disqualifying.keywords <- c(
"chronic malnutrition"
,
"mole rat"
,
"cgpwd"
,
"cpwd"
,
"rvcwda"
,
"pwdtc"
,
"road"
,
"highway"
,
"environmental health"
,
"environmental condition"
,
"rehydration therapy"
#,
#"-dpo", "cidpo", "hdpo", "dpo series", "financial sector dpo", "dpo (ri)", "management dpo", "poverty dpo", "growth dpo", "support dpo", "system dpo", "programmatic dpo"
,
"fiscal"
,
"growth and compet"
,
"combination therap"
,
"emergency dpo"
,
"conventional weapons", "weapons destruction"
,
"fairtradeafrica"
,
"blindness prevention", "avoidable blindness"
)
disqualifying.sectors <- c(
"Public finance management (PFM)"
,
"Domestic revenue mobilisation"
#,
#"Mineral/mining policy and administrative management"
)
inclusion.keywords <- c(
"inclus"
,
"empower", "habiliter", "autorizar"
,
"rights", "droits", "derechos"
)
employment.keywords <- c(
"employ", "emplear", "empleo", "emploi"
,
"travail", "trabajo"
,
"job"
,
"labour", "labor[.]", "labor "
,
"cash for work"
,
"vocation"
)
intellectual.keywords <- c(
"intellectual"
,
"autistic", "austism", "autist"
,
"special needs", "necesidades especiales", "besoins spéciau"
,
"learning diff", "learning disa"
)
crs$relevance <- "None"
crs[grepl(paste(minor.keywords, collapse = "|"), tolower(paste(crs$project_title, crs$short_description, crs$long_description)))]$relevance <- "Minor"
crs[grepl(paste(major.keywords, collapse = "|"), tolower(crs$long_description))]$relevance <- "Minor"
crs[grepl(paste(major.keywords, collapse = "|"), tolower(paste(crs$short_description, crs$project_title)))]$relevance <- "Major"
crs$check <- "No"
crs[relevance == "Minor"]$check <- "potential false positive"
crs[relevance != "None"][purpose_name %in% disqualifying.sectors]$check <- "potential false negative"
crs[relevance != "None"][grepl(paste(disqualifying.keywords, collapse = "|"), tolower(paste(crs[relevance != "None"]$project_title, crs[relevance != "None"]$short_description, crs[relevance != "None"]$long_description)))]$check <- "potential false negative"
crs[relevance != "None"][grepl(paste(disqualifying.keywords, collapse = "|"), tolower(paste(crs[relevance != "None"]$project_title, crs[relevance != "None"]$short_description, crs[relevance != "None"]$long_description)))]$relevance <- "None"
crs[relevance != "None"][purpose_name %in% disqualifying.sectors]$relevance <- "None"
crs$inclusion <- "Not inclusion"
crs[relevance != "None"][grepl(paste(inclusion.keywords, collapse = "|"), tolower(paste(crs[relevance != "None"]$project_title, crs[relevance != "None"]$short_description, crs[relevance != "None"]$long_description)))]$inclusion <- "Inclusion"
crs$employment <- "Not employment"
crs[relevance != "None"][grepl(paste(employment.keywords, collapse = "|"), tolower(paste(crs[relevance != "None"]$project_title, crs[relevance != "None"]$short_description, crs[relevance != "None"]$long_description)))]$employment <- "Employment"
crs$intellectual <- "Not intellectual"
crs[relevance != "None"][grepl(paste(intellectual.keywords, collapse = "|"), tolower(paste(crs[relevance != "None"]$project_title, crs[relevance != "None"]$short_description, crs[relevance != "None"]$long_description)))]$intellectual <- "intellectual"
intellectual.keywords <- c(
"intellect", "intelect"
,
"autistic", "austism", "autist"
,
"special needs", "necesidades especiales", "besoins spéciau"
,
"learning diff", "learning disa", "difficultés d'apprentissage", "dificultades de aprendizaje", "discapacidad de aprendizaje", "trouble d'apprentissage"
)
crs$intellectual <- "Not intellectual"
crs[relevance != "None"][grepl(paste(intellectual.keywords, collapse = "|"), tolower(paste(crs[relevance != "None"]$project_title, crs[relevance != "None"]$short_description, crs[relevance != "None"]$long_description)))]$intellectual <- "intellectual"
crs.intellectual <- dcast.data.table(crs, .~relevance + intellectual, value.var="usd_disbursement_deflated", fun.aggregate = function (x) sum(x, na.rm=T))
View(crs.intellectual)
crs.intellectual <- dcast.data.table(crs, year~relevance + intellectual, value.var="usd_disbursement_deflated", fun.aggregate = function (x) sum(x, na.rm=T))
View(crs.intellectual)
fwrite(crs.intellectual, "output/crs intellectual.csv")
intellectual.keywords <- c(
"intellect", "intelect"
,
"cognitive", "cognitiva"
,
"autistic", "austism", "autist"
,
"special needs", "necesidades especiales", "besoins spéciau"
,
"learning diff", "learning disa", "difficultés d'apprentissage", "dificultades de aprendizaje", "discapacidad de aprendizaje", "trouble d'apprentissage"
)
crs$intellectual <- "Not intellectual"
crs[relevance != "None"][grepl(paste(intellectual.keywords, collapse = "|"), tolower(paste(crs[relevance != "None"]$project_title, crs[relevance != "None"]$short_description, crs[relevance != "None"]$long_description)))]$intellectual <- "intellectual"
crs.intellectual <- dcast.data.table(crs, year~relevance + intellectual, value.var="usd_disbursement_deflated", fun.aggregate = function (x) sum(x, na.rm=T))
fwrite(crs.intellectual, "output/crs intellectual.csv")
fwrite(crs.intellectual, "output/crs intellectual.csv")
crs.int <- crs[intellectual != "Not intellectual"]
View(crs.int)
intellectual.keywords <- c(
"intellect", "intelect"
,
"cognitive", "cognitiva"
,
"autistic", "austism", "autist"
,
"special needs", "necesidades especiales", "besoins spéciau"
,
"special education", "educación especial", "éducation spéciale"
,
"learning diff", "learning disa", "difficultés d'apprentissage", "dificultades de aprendizaje", "discapacidad de aprendizaje", "trouble d'apprentissage"
)
crs$intellectual <- "Not intellectual"
crs[relevance != "None"][grepl(paste(intellectual.keywords, collapse = "|"), tolower(paste(crs[relevance != "None"]$project_title, crs[relevance != "None"]$short_description, crs[relevance != "None"]$long_description)))]$intellectual <- "intellectual"
crs.int <- crs[intellectual != "Not intellectual"]
crs.int[, nrow(.SD), by=year]
crs.int[, (value=sum(usd_disbursement_deflated,na.rm=T), number=nrow(.SD)), by=year]
crs.int[, .(value=sum(usd_disbursement_deflated,na.rm=T), number=nrow(.SD)), by=year]
crs[, .(value=sum(usd_disbursement_deflated,na.rm=T), number=nrow(.SD)), by=.(year, intellecutal)]
crs[, .(value=sum(usd_disbursement_deflated,na.rm=T), number=nrow(.SD)), by=.(year, intellectu]al)]
crs[, .(value=sum(usd_disbursement_deflated,na.rm=T), number=nrow(.SD)), by=.(year, intellectual)]
crs[, .(value.id=sum(usd_disbursement_deflated[intellectual == "intellectual"],na.rm=T), count.id=nrow(.SD[intellectual == "intellectual"]), value.od=), by=.(year)]
crs[, .(value.id=sum(.SD[intellectual == "intellectual"]$usd_disbursement_deflated,na.rm=T), count.id=nrow(.SD[intellectual == "intellectual"]), value.od=), by=.(year)]
crs[, .(value.id=sum(.SD[intellectual == "intellectual"]$usd_disbursement_deflated,na.rm=T), count.id=nrow(.SD[intellectual == "intellectual"])), by=.(year)]
crs[, .(value.id=sum(.SD[intellectual == "intellectual"]$usd_disbursement_deflated,na.rm=T), count.id=nrow(.SD[intellectual == "intellectual"]), value.od=sum(.SD[intellectual != "intellectual"]$usd_disbursement_deflated, na.rm=T), count.id=nrow(.SD[intellectual != "intellectual"])), by=.(year)]
crs[, .(value.id=sum(.SD[intellectual == "intellectual"]$usd_disbursement_deflated,na.rm=T), count.id=nrow(.SD[intellectual == "intellectual"]), value.od=sum(.SD[intellectual != "intellectual" & relevance != "None"]$usd_disbursement_deflated, na.rm=T), count.id=nrow(.SD[intellectual != "intellectual" & relevance != "None"])), by=.(year)]
crs.intellectual <- crs[, .(value.id=sum(.SD[intellectual == "intellectual"]$usd_disbursement_deflated,na.rm=T), count.id=nrow(.SD[intellectual == "intellectual"]), value.od=sum(.SD[intellectual != "intellectual" & relevance != "None"]$usd_disbursement_deflated, na.rm=T), count.id=nrow(.SD[intellectual != "intellectual" & relevance != "None"])), by=.(year)]
fwrite(crs.intellectual, "output/crs intellectual.csv")
